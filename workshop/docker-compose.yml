version: '3.9'

services:
  # Prometheus container
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    #Expose localhost port and match with container port
    ports:
      - 9090:9090
    # ./prometheus refer instance physical path mount to container path
    # prometheus-data is a docker volume
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    # Specific prometheus configuration path
    command: 
    - --config.file=/etc/prometheus/prometheus.yml
    # Bridge network name
    networks:
      - prometheus
    depends_on:
      - cadvisor

 # Node Exporter container
  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
     #Expose localhost port and match with container port
    ports:
      - 9100:9100
    # Bridge network name
    networks:
      - prometheus

  # Sample application container
  hashbrowns:
    image: alexellis2/hash-browns
    container_name: hashbrowns
     #Expose localhost port and match with container port
    ports:
      - "8082:8080"
    # Bridge network name      
    networks:
      - prometheus

  # Grafana container
  grafana:
    image: grafana/grafana:10.2.3-ubuntu
    container_name: grafana
    environment:
     - GF_PATHS_PROVISIONING=conf/provisioning
    #Expose localhost port and match with container port
    ports:
      - 3001:3000
    volumes:
      - "./data:/var/lib/grafana"
      - "./data/conf/provisioning:/usr/share/grafana/conf/provisioning"
    # Bridge network name
    user: "1001"
    networks:
      - prometheus

  # Graphite container
  graphite:
    image: graphiteapp/graphite-statsd
    container_name: graphite
     #Expose localhost port and match with container port
    ports:
    - "8081:80"
    - "2003-2004:2003-2004"
    - "2023-2024:2023-2024"
    - "8125:8125/udp"
    # Graphite will mount physical path to related container path
    volumes:
    - ./graphite/conf:/opt/graphite/conf
    - ./graphite/storage:/opt/graphite/storage
    - ./graphite/data:/opt/graphite/data
    - ./graphite/logs:/var/log/graphite
    environment:
    - GRAPHITE_SECRET_KEY="MY_SECRET_KEY"
    - STATSD_ENABLED=true
    - STATSD_PORTS=8125
    # Bridge network name
    networks:
      - prometheus

  # Loki container
  loki:
    image: grafana/loki:2.9.3
    container_name: loki
    #Expose localhost port and match with container port
    ports:
      - 3100:3100
    command: -config.file=/etc/loki/loki-config.yml
    # ./loki/data:/usr/local/var/lib/loki - Store loki data
    # conf - loki configuration file that mount to container
    volumes:
      #- "./loki/data:/usr/local/var/lib/loki"
      - /etc/localtime:/etc/localtime:ro
      - "./loki/conf/:/etc/loki"
      - loki:/data/loki
    # Bridge network name
    networks:
      - prometheus
      
  # Promtail container
  promtail:
    image: grafana/promtail:2.9.3
    container_name: promtail
    #Expose localhost port and match with container port
    ports:
      - 9080:9080
    command: -config.file=/etc/promtail/promtail-config.yml
    # /var/lib/docker/containers - docker container path
    # promtail - promtail configuration file that mount to container
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./log:/var/lib/mylog
      - ./promtail:/etc/promtail
    # Bridge network name
    networks:
      - prometheus

  tempo:
    # https://github.com/grafana/tempo/releases
    image: grafana/tempo:2.0.1
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${PWD}/tempo/tempo.yml:/etc/tempo.yaml
      - tempo:/tmp/tempo
    restart: unless-stopped
    ports:
      - 3200:3200  # tempo
      - 4007:4317  # otlp grpc
    #depends_on:
    #  - otel-collector      
    networks:
      - prometheus

  # Cadvisor container
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    #Expose localhost port and match with container port
    ports:
    - 8080:8080
    # /var/lib/docker/ - docker related path
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    # Bridge network name
    networks:
      - prometheus

  db:
    image: mysql:8
    container_name: mysql
    restart: always
    environment:
      MYSQL_DATABASE: grafana
      MYSQL_USER: grafana
      MYSQL_PASSWORD: grafana
      MYSQL_ROOT_PASSWORD: P@ssw0rd123
    ports:
      - "3306:3306"
    volumes:
     - my-db:/var/lib/mysql

  #influxdb:
  #  image: influxdb:2.1.1
  #  container_name: influxdb
  #  volumes:
  #    - influxdb-storage:/var/lib/influxdb2:rw
  #  env_file:
  #    - .env
  #  entrypoint: ["./entrypoint.sh"]
  #  restart: on-failure:10
  #  ports:
  #    - ${DOCKER_INFLUXDB_INIT_PORT}:8086
  #  networks:
  #    - prometheus
#
  #telegraf:
  #  image: telegraf:1.19
  #  container_name: telegraf
  #  volumes:
  #    - ${TELEGRAF_CFG_PATH}:/etc/telegraf/telegraf.conf:rw
  #  env_file:
  #    - .env
  #  depends_on:
  #    - influxdb
  #  networks:
  #    - prometheus

volumes:
  # Create docker volume to store Prometheus data
  prometheus-data:
  my-db:
  loki:
  tempo:
  influxdb-storage:

# Create docker network, name prometheus with bridge type
networks:
  prometheus:
    driver: bridge
