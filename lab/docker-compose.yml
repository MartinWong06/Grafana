version: '3.9'

services:
  # Prometheus container
  prometheus_lab:
    image: prom/prometheus:v2.42.0
    container_name: prometheus_lab
    #Expose localhost port and match with container port
    ports:
      - 9090:9090
    # ./prometheus refer instance physical path mount to container path
    # prometheus-data-lab is a docker volume
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data-lab:/prometheus
    # Specific prometheus configuration path
    command: 
    - --config.file=/etc/prometheus/prometheus.yml
    # Bridge network name
    networks:
      - prometheus-lab
    depends_on:
      - cadvisor_lab
 # Node Exporter container
  node-exporter_lab:
    image: prom/node-exporter
    container_name: node-exporter_lab
     #Expose localhost port and match with container port
    ports:
      - 9100:9100
    # Bridge network name
    networks:
      - prometheus-lab
  # Sample application container
  hashbrowns_lab:
    image: alexellis2/hash-browns
    container_name: hashbrowns_lab
     #Expose localhost port and match with container port
    ports:
      - "8082:8080"
    # Bridge network name      
    networks:
      - prometheus-lab
  # Grafana container
  grafana_lab:
    image: grafana/grafana:9.4.7-ubuntu
    container_name: grafana_lab
    #Expose localhost port and match with container port
    ports:
      - 3001:3000
    volumes:
      - "./data:/var/lib/grafana"
    # Bridge network name
    networks:
      - prometheus-lab
  # Graphite container
  graphite_lab:
    image: graphiteapp/graphite-statsd
    container_name: graphite_lab
     #Expose localhost port and match with container port
    ports:
    - "8081:80"
    - "2003-2004:2003-2004"
    - "2023-2024:2023-2024"
    - "8125:8125/udp"
    # Graphite will mount physical path to related container path
    volumes:
    - ./graphite/conf:/opt/graphite/conf
    - ./graphite/storage:/opt/graphite/storage
    - ./graphite/data:/opt/graphite/data
    - ./graphite/logs:/var/log/graphite
    environment:
    - GRAPHITE_SECRET_KEY="MY_SECRET_KEY"
    - STATSD_ENABLED=true
    - STATSD_PORTS=8125
    # Bridge network name
    networks:
      - prometheus-lab
  # Loki container
  loki_lab:
    image: grafana/loki:2.7.4
    container_name: loki_lab
    #Expose localhost port and match with container port
    ports:
      - 3100:3100
    command: -config.file=/etc/loki/loki-config.yml
    # ./loki/data:/usr/local/var/lib/loki - Store loki data
    # conf - loki configuration file that mount to container
    volumes:
      - "./loki/data:/usr/local/var/lib/loki"
      - "./loki/conf/:/etc/loki"
    # Bridge network name
    networks:
      - prometheus-lab
  # Promtail container
  promtail_lab:
    image: grafana/promtail:2.7.4
    container_name: promtail_lab
    #Expose localhost port and match with container port
    ports:
      - 9080:9080
    command: -config.file=/etc/promtail/promtail-config.yml
    # /var/lib/docker/containers - docker container path
    # promtail - promtail configuration file that mount to container
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail:/etc/promtail
    # Bridge network name
    networks:
      - prometheus-lab
  # Cadvisor container
  cadvisor_lab:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor_lab
    #Expose localhost port and match with container port
    ports:
    - 8080:8080
    # /var/lib/docker/ - docker related path
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    # Bridge network name
    networks:
      - prometheus-lab
  db_lab:
    image: mysql:8
    container_name: mysql_lab
    restart: always
    environment:
      MYSQL_DATABASE: grafana
      MYSQL_USER: grafana
      MYSQL_PASSWORD: grafana
      MYSQL_ROOT_PASSWORD: P@ssw0rd123
    ports:
      - "3306:3306"
    volumes:
     - my-db-lab:/var/lib/mysql
volumes:
  # Create docker volume to store Prometheus data
  prometheus-data-lab:
  my-db-lab:
# Create docker network, name prometheus with bridge type
networks:
  prometheus-lab:
    driver: bridge
